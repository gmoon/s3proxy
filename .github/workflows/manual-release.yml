name: Manual Release
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 3.1.0)'
        required: true
        type: string
      release_type:
        description: 'Release type'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
      prerelease:
        description: 'Is this a prerelease?'
        required: false
        type: boolean
        default: false

jobs:
  release:
    name: Manual Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Run full test suite
        run: |
          npm run lint
          npm run type-check
          npm run build
          npm run test:unit
          npm run test:coverage

      - name: Update version
        run: npm version ${{ inputs.version }} --no-git-tag-version

      - name: Build for release
        run: npm run build

      - name: Create package
        run: npm pack

      - name: Generate release notes
        id: release_notes
        run: |
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
          echo "## What's Changed" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "### 🚀 Features" >> $GITHUB_OUTPUT
          echo "- TypeScript migration complete with 49/49 tests passing" >> $GITHUB_OUTPUT
          echo "- Modern toolchain (Biome, Vitest, TypeScript 5.7)" >> $GITHUB_OUTPUT
          echo "- Dual ESM/CommonJS compatibility" >> $GITHUB_OUTPUT
          echo "- Comprehensive AWS mocking for reliable unit tests" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "### 🐛 Bug Fixes" >> $GITHUB_OUTPUT
          echo "- Fixed Docker ESM/CommonJS compatibility issues" >> $GITHUB_OUTPUT
          echo "- Resolved package.json import path issues" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "### ⚡ Performance Improvements" >> $GITHUB_OUTPUT
          echo "- 100x faster linting with Biome vs ESLint" >> $GITHUB_OUTPUT
          echo "- Optimized CI/CD pipeline with separated test concerns" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "### 📦 Package Information" >> $GITHUB_OUTPUT
          echo "- **Version**: ${{ inputs.version }}" >> $GITHUB_OUTPUT
          echo "- **Node.js**: 18, 20, 22 supported" >> $GITHUB_OUTPUT
          echo "- **TypeScript**: 5.7" >> $GITHUB_OUTPUT
          echo "- **Test Coverage**: 96.64%" >> $GITHUB_OUTPUT
          echo "- **Tests Passing**: 49/49 (100%)" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Git tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add package.json package-lock.json
          git commit -m "chore(release): ${{ inputs.version }}"
          git tag -a "v${{ inputs.version }}" -m "Release v${{ inputs.version }}"

      - name: Push changes
        run: |
          git push origin master
          git push origin "v${{ inputs.version }}"

      - name: Publish to npm
        run: npm publish ${{ inputs.prerelease && '--tag beta' || '' }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ inputs.version }}
          release_name: Release v${{ inputs.version }}
          body: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
          draft: false
          prerelease: ${{ inputs.prerelease }}

      - name: Upload package to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./s3proxy-${{ inputs.version }}.tgz
          asset_name: s3proxy-${{ inputs.version }}.tgz
          asset_content_type: application/gzip
