name: Node CI
on: 
  push:
    branches: [ master, typescript-migration ]
  pull_request:
    branches: [ master ]

jobs:
  # Security audit - quick check for critical vulnerabilities
  audit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Security audit
        run: npm audit --audit-level critical

  # Core tests - build, lint, type-check, unit tests
  test:
    name: "Core Tests"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20, 22]
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Lint
        run: npm run lint || echo "Linting warnings are acceptable"
      - name: Type check
        run: npm run type-check
      - name: Build
        run: npm run build
      - name: Unit tests
        run: npm run test:unit
      - name: Coverage
        run: npm run test:coverage
        if: matrix.node-version == 22
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: matrix.node-version == 22
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

  # SAM application tests
  sam-tests:
    name: "SAM Application Tests"
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - name: Setup SAM CLI
        uses: aws-actions/setup-sam@v2
        with:
          use-installer: true
      - name: Install dependencies
        run: npm ci
      - name: Build main package
        run: npm run build
      - name: Test SAM app
        run: make sam-app-s3proxy
      - name: Build SAM app
        run: make sam-app

  # Validation tests - comprehensive functionality testing
  validation-tests:
    name: "Validation Tests"
    runs-on: ubuntu-latest
    needs: [test]
    if: github.ref == 'refs/heads/master' || github.base_ref == 'master'
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Build
        run: npm run build
      - name: Run validation tests
        run: make test-validation-docker
      - name: Upload validation test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: validation-test-results
          path: |
            test-results-*.json
            *.log

  # Performance tests - load testing with Artillery
  performance-tests:
    name: "Performance Tests"
    runs-on: ubuntu-latest
    needs: [test]
    if: github.ref == 'refs/heads/master' || github.base_ref == 'master'
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Build
        run: npm run build
      - name: Run load tests
        run: make artillery-docker
      - name: Upload performance test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-test-results
          path: |
            load-test-results-*.json
            *.log

  # Package verification - ensure package contents are correct
  package-verification:
    name: "Package Verification"
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Build
        run: npm run build
      - name: Create package (verification only)
        run: npm pack
      - name: Verify package contents
        run: |
          echo "üì¶ Package contents:"
          tar -tzf s3proxy-*.tgz | sort
          echo ""
          echo "üìä Package size:"
          ls -lh s3proxy-*.tgz
          echo ""
          echo "üîç Verifying required files are present:"
          tar -tzf s3proxy-*.tgz | grep -E "(package\.json|README\.md|LICENSE|dist/)" || exit 1
      - name: Test package installation
        run: |
          mkdir test-install
          cd test-install
          npm init -y
          npm install ../s3proxy-*.tgz
          node -e "const s3proxy = require('s3proxy'); console.log('‚úÖ Package installs correctly');"
      - name: Cleanup verification artifacts
        run: rm -f s3proxy-*.tgz
