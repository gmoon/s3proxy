name: Node CI
on: 
  push:
    branches: [ master, typescript-migration ]
  pull_request:
    branches: [ master ]

jobs:
  # Security audit - quick check for critical vulnerabilities
  audit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Security audit
        run: npm audit --audit-level critical

  # Core tests - build, lint, type-check, unit tests
  test:
    name: "Core Tests"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20, 22]
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Lint
        run: npm run lint || echo "Linting warnings are acceptable"
      - name: Type check
        run: npm run type-check
      - name: Build
        run: npm run build
      - name: Unit tests
        run: npm run test:unit
      - name: Coverage
        run: npm run test:coverage
        if: matrix.node-version == 22

  # Docker integration tests - only run on master branch or PRs to master
  docker-tests:
    name: "Docker Integration"
    runs-on: ubuntu-latest
    needs: [test]
    if: github.ref == 'refs/heads/master' || github.base_ref == 'master'
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Build
        run: npm run build
      - name: Docker build and test
        run: npm run dockerize-for-test && npm run artillery-docker
