AWSTemplateFormatVersion: 2010-09-09
Description: S3Proxy ECS Stack
Parameters:
  ContainerPort:
    Type: Number
    Default: 8080
  LoadBalancerPort:
    Type: Number
    Default: 443
  ServiceName:
    Type: String
    Default: S3Proxy
  VPC:
    Type: AWS::EC2::VPC::Id
    Default: vpc-00d1ce4fd1a58786a
  SubnetA:
    Type: AWS::EC2::Subnet::Id
    Default: subnet-045344ab6e9eb9916
  SubnetB:
    Type: AWS::EC2::Subnet::Id
    Default: subnet-063e832a899050f71
  HostedZoneName:
    Type: String
    Default: forkzero.com
  Subdomain:
    Type: String
    Default: s3proxy
  BucketName:
    Type: String
  ContainerImage:
    Type: String
    Default: forkzero/s3proxy:2.0.1
Resources: 
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 63
      # will look for a 200 status code by default unless specified otherwise
      HealthCheckPath: /health
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      HealthyThresholdCount: 2
      Name: S3ProxyTargetGroup
      Port: !Ref ContainerPort
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "60" # default is 300
      TargetType: ip
      VpcId: !Ref VPC
  S3ProxyContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: S3ProxyContainerSecurityGroup
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
          #CidrIp: 0.0.0.0/0
  S3ProxyECSLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/S3ProxyTask
  S3ProxyECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: 
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - ecs-tasks.amazonaws.com
                - apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "s3:GetObject"
                Resource: !Join ['', ['arn:aws:s3:::', !Ref BucketName, '/*']]
  S3ProxyECSExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: S3ProxyECSExecutionRole
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
  S3ProxyECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      CapacityProviders:
        - FARGATE
      ClusterName: S3Proxy
      #ClusterSettings:
      #  - ClusterSettings
      #Configuration:
      #  ClusterConfiguration
      #DefaultCapacityProviderStrategy:
      #  - CapacityProviderStrategyItem
  S3ProxyTask:
    Type: AWS::ECS::TaskDefinition
    Properties: 
      ContainerDefinitions: 
        -
          #Command: 
          #  - String
          #Cpu: 1024
          #DependsOn: 
          #  - ContainerDependency
          #DisableNetworking: Boolean
          #DnsSearchDomains: 
          #  - String
          #DnsServers: 
          #  - String
          #DockerLabels: 
          #  Key : Value
          #DockerSecurityOptions: 
          #  - String
          #EntryPoint: 
          #  - String
          Environment: 
            - Name: PM2_INSTANCES
              Value: "4"
            - Name: AWS_NODEJS_CONNECTION_REUSE_ENABLED
              Value: "1"
            - Name: DEBUG
              Value: s3proxy
            - Name: PORT
              Value: !Ref ContainerPort
            - Name: BUCKET
              Value: !Ref BucketName
          #EnvironmentFiles: 
          #  - EnvironmentFile
          Essential: true
          #ExtraHosts: 
          #  - HostEntry
          #FirelensConfiguration: 
          #  FirelensConfiguration
          #HealthCheck: 
            #Command: [ "CMD-SHELL", "curl -f http://localhost:${PORT}/health || exit 1" ]
            #Interval: 60
            #Retries: 3
            #StartPeriod: 0
            #Timeout: 5
          # Hostname: String
          Image: !Ref ContainerImage
          Interactive: false
          #Links: 
          #  - String
          #LinuxParameters: 
          #  LinuxParameters
          LogConfiguration: 
            LogDriver: awslogs
            Options:
              awslogs-region: us-east-1
              awslogs-group: !Ref S3ProxyECSLogGroup
              awslogs-stream-prefix: ecs
          #Memory: 512
          #MemoryReservation: Integer
          #MountPoints: 
          #  - MountPoint
          Name: S3ProxyContainer
          PortMappings:
            - ContainerPort: !Ref ContainerPort
              Protocol: tcp
          #Privileged: Boolean
          PseudoTerminal: false
          ReadonlyRootFilesystem: false
          #RepositoryCredentials: 
          #  RepositoryCredentials
          #ResourceRequirements: 
          #  - ResourceRequirement
          #Secrets: 
          #  - Secret
          #StartTimeout: Integer
          #StopTimeout: Integer
          #SystemControls: 
          #  - SystemControl
          #Ulimits: 
          #  - Ulimit
          #User: String
          #VolumesFrom: 
          #  - VolumeFrom
          #WorkingDirectory: String
      Cpu: "1024"
      #EphemeralStorage: 
      #  EphemeralStorage
      ExecutionRoleArn: !GetAtt S3ProxyECSExecutionRole.Arn
      Family: express-s3proxy
      #InferenceAccelerators: 
      #  - InferenceAccelerator
      #IpcMode: String
      Memory: "2048"
      NetworkMode: awsvpc
      #PidMode: String
      #PlacementConstraints: 
      #  - TaskDefinitionPlacementConstraint
      #ProxyConfiguration: 
      #  ProxyConfiguration
      #RequiresCompatibilities: 
      #  - String
      #Tags: 
      #  - Tag
      TaskRoleArn: !Ref S3ProxyECSTaskRole
      #Volumes: 
      #  - Volume
  S3ProxyECSService:
    Type: AWS::ECS::Service
    DependsOn:
      - ListenerHTTPS
    Properties: 
      #CapacityProviderStrategy: 
      #  - CapacityProviderStrategyItem
      Cluster: !Ref S3ProxyECSCluster
      #DeploymentConfiguration: 
      #  DeploymentConfiguration
      #DeploymentController:
      #  Type: ECS
      DesiredCount: 1
      #EnableECSManagedTags: true
      #EnableExecuteCommand: false
      #HealthCheckGracePeriodSeconds: Integer
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: S3ProxyContainer
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref TargetGroup
      NetworkConfiguration: 
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups: 
            - !Ref S3ProxyContainerSecurityGroup
          Subnets: 
            - subnet-045344ab6e9eb9916
            - subnet-063e832a899050f71
      #PlacementConstraints: 
      #  - PlacementConstraint
      #PlacementStrategies: 
      #  - PlacementStrategy
      #PlatformVersion: LATEST
      #PropagateTags: String
      #Role: 
      #SchedulingStrategy: REPLICA
      ServiceName: S3ProxyService
      #ServiceRegistries: 
      #  - ServiceRegistry
      #Tags: 
      #  - Tag
      TaskDefinition: !Ref S3ProxyTask

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: S3ProxyLoadBalancerSecurityGroup
      VpcId: vpc-00d1ce4fd1a58786a
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref LoadBalancerPort
          ToPort: !Ref LoadBalancerPort
          CidrIp: 0.0.0.0/0
  ListenerCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties: 
      #CertificateAuthorityArn: String
      #CertificateTransparencyLoggingPreference: String
      DomainName: s3proxy.forkzero.com
      #DomainValidationOptions: 
      #  - DomainValidationOption
      #SubjectAlternativeNames: 
      #  - String
      #Tags: 
      #  - Tag
      ValidationMethod: DNS
  ListenerHTTPS:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: !Ref LoadBalancerPort
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref ListenerCertificate
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      LoadBalancerAttributes:
        # this is the default, but is specified here in case it needs to be changed
        - Key: idle_timeout.timeout_seconds
          Value: "60"
      Name: !Join ['', [!Ref ServiceName, LoadBalancer]]
      # "internal" is also an option
      Scheme: internet-facing
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets:
        - !Ref SubnetA
        - !Ref SubnetB
  AutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['', [!Ref ServiceName, AutoScalingRole]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole'
  AutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: 0
      MaxCapacity: 5
      ResourceId: !Join ['/', [service, !Ref S3ProxyECSCluster, !GetAtt S3ProxyECSService.Name]]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      # "The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that allows Application Auto Scaling to modify your scalable target."
      RoleARN: !GetAtt AutoScalingRole.Arn
  AutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Join ['', [!Ref ServiceName, AutoScalingPolicy]]
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 10
        ScaleOutCooldown: 10
        # Keep things at or lower than 80% CPU utilization, for example
        TargetValue: 80
  DNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Join ['', [!Ref HostedZoneName, .]]
      Name: !Join ['', [!Ref Subdomain, ., !Ref HostedZoneName, .]]
      Type: A
      AliasTarget:
        DNSName: !GetAtt LoadBalancer.DNSName
        HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID
Outputs:
  Endpoint:
    Description: Endpoint
    Value: !Join ['', ['https://', !Ref DNSRecord]]
